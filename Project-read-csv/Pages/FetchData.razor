@page "/fetchdata"
@using Project_read_csv.Data
@using Project_read_csv.Domain.Models;
@using Project_read_csv.Services;
@inject WeatherForecastService ForecastService
@inject UploadCsvService uploadCsvService

<PageTitle>Weather forecast</PageTitle>

<h1>Aqui será mostrado o retorno da api </h1>

<p>This component demonstrates fetching data from a service.</p>

<h1>"text/csv"</h1>

<InputFile OnChange="@LoadFiles" accept=".csv" typeof=".csv" />
<h1>@Message</h1>

@if (uploadCsv == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tipocodigo</th>
                <th>Descricao</th>
                <th>Estoque</th>
                <th>Precovenda</th>
                <th>Precocusto</th>
                <th>Datahoracadastro</th
            </tr>
        </thead>
        <tbody>
            @foreach (var file in uploadCsv)
            {
                <tr>
                    <td>@file.Id</td>
                    <td>@file.Tipocodigo</td>
                    <td>@file.Descricao</td>
                    <td>@file.Estoque</td>
                    <td>@file.Precovenda</td>
                    <td>@file.Precocusto</td>
                    <td>@file.Datahoracadastro</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private List<UploadCsv> uploadCsv;

    private string Message; 

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

    private async Task LoadFiles(InputFileChangeEventArgs filecsv)
    {
        if (filecsv.File.ContentType == "text/csv")
        {
            uploadCsv = await uploadCsvService.GetCsvAsync(filecsv);
            Message = "O arquivo importado é um .csv";
        }
        else
        {
            Message = "Tipo de arquivo não suportado";
        }
    }
}
